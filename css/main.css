@charset "UTF-8";
/* browsers are optimized to animate two properties, but with transform you can do a lot */
@keyframes moveInLeft {
  /* beginning (before start) */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  /* at the end */
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  /* beginning (before start) */
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  /* at the end */
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  /* beginning (before start) */
  0% {
    opacity: 0;
    /*  Y axis moves from top to bottom, so down is a positive value*/
    transform: translateY(3rem); }
  /* at the end */
  100% {
    opacity: 1;
    transform: translate(0); } }

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* by default box-sizing is not inherited, making it so, and giving it a value
     in body is a better practice, as it is easier to override with plugins etc*/
  box-sizing: inherit; }

/* % of the user defined fontsize in the browser - by default 16, but if the user changes it, our design adapts */
html {
  font-size: 62.5%; }

body {
  /* changes the box model so that the borders and padding are no
  longer added to the toal width/height */
  box-sizing: border-box; }

body {
  /* properties related to font are usually inherited, so we put it in body */
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: 16px;
  /* Unitless values: use this number multiplied
by the element's font size */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* can help fix shaking issues.  */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    /* letter spacing to feel like outdoors */
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* animation-iteration-count: 3; execute 3 times*/
    /* animation-delay: 1s; delay the start of the animation */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #55c57a, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 0.2rem;
  transition: all 0.2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

/* pseudo classes are a special state of a selector
visited state would by default turn a link purple
*/
.btn {
  /* creates a pseudo-element that is the last child of the selected element
   that you can style */
  /* moves the button up slightly when hovered */
  /* moves the button down slightly when clicked */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    /* e.g. overline, line-through, underline */
    text-decoration: none;
    /* top and bottom, left and right
  if you specify 4 properties, remember they are specified clockwise
  */
    padding: 1.5rem 4rem;
    display: inline-block;
    /* text-align: center; -inherited from parent element .text-box */
    border-radius: 10rem;
    /* apply the transition to all properties defined
  - must be on the initial state
  - will apply to the hover and active states also
  */
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem; }
  .btn::after {
    /* must be specified */
    content: '';
    display: inline-block;
    /* since the pseudo element is a child, then here it will match the button */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* will be relative to the first parent element that has a relative position
  property - in this case, the button */
    position: absolute;
    top: 0;
    left: 0px;
    z-index: -1;
    transition: all 0.4s; }
  .btn:hover {
    transform: translateY(-3px);
    /* 0 for no shadow in x axis
  10px down 20px blur*/
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* apply these styles, only when the button is being hovered
  the initial state is the after pseudo element*/ }
    .btn:hover::after {
      /* transform: scale(1.5); */
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    /* decrease the shadown to make the button look closer */
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: Â§color-white; }
  .btn--animated {
    /* .75s delay */
    animation: moveInBottom 0.5s ease-out 0.75s;
    /* applies the properties of the 0% before the animation starts */
    animation-fill-mode: backwards;
    /* animation-name: moveInBottom;
  animation-duration: 1s;
  animation-timing-function: ease-out; */ }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #7ed56f;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #7ed56f;
  padding: 3px;
  transition: all 0.2s; }

.btn-text:hover {
  background-color: #7ed56f;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.5);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all 0.2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #7ed56f;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform 0.3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: 0.5rem;
    background-image: linear-gradient(to right, #55c57a, #28b485);
    -webkit-background-clip: text;
    color: transparent; }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03);
    box-shadow: 0 2.5rem 4.5rem rgba(0, 0, 0, 0.15); }

.card {
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 50rem; }
  .card__side {
    color: #fff;
    font-size: 2rem;
    height: 50rem;
    transition: all 0.8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    border-radius: 3px;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
  .card:hover .card__side--front {
    transform: rotateY(180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0); }

.header {
  /* 95% of the viewport height */
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(85, 197, 122, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* cover tries to fit to the width of the viewport, but crops if too big */
  background-size: cover;
  /* ensures the top of the image stays at the top of the container as it is resized */
  background-position: top;
  position: relative;
  /* the units are % of the element base size, relative to the top left corner (trbl) */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* clip-path: polygon(50% 0, 100% 100%, 0 100%); */ }
  .header__logo-box {
    position: absolute;
    /* the top and left properties are relative to a parent element that has it's
  position set to relative (which we must set) */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /* if you only specify the height, the width will be automatically calculated */
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    /* the position is of the top left corner of the element,
    to the nearest relatively positioned parent */
    top: 40%;
    left: 50%;
    /* transforms it's position, relative to itself, so here,
    it moves 50% of its's width to the left,
    and 50% of it's height up*/
    transform: translate(-50%, -50%);
    text-align: center; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: '';
    display: table;
    clear: both; }
  .row [class^='col-'] {
    float: left; }
    .row [class^='col-']:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(((100% - 2 * 6rem) / 3) * 2 + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(((100% - 3 * 6rem) / 4) * 2 + 6rem); }
  .row .col-3-of-4 {
    width: calc(((100% - 3 * 6rem) / 4) * 3 + 2 * 6rem); }

.section-about {
  background-color: #f7f7f7;
  padding: 25vh 0 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(85, 197, 122, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  background-size: cover;
  margin-top: -10rem;
  transform: skewY(-7deg); }
  .section-features > * {
    transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 25vh 0 25rem 0;
  margin-top: -10vh; }
