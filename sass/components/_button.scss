/* pseudo classes are a special state of a selector
visited state would by default turn a link purple
*/
.btn {
  &:link,
  &:visited {
    text-transform: uppercase;
    /* e.g. overline, line-through, underline */
    text-decoration: none;
    /* top and bottom, left and right
  if you specify 4 properties, remember they are specified clockwise
  */
    padding: 1.5rem 4rem;
    display: inline-block;
    /* text-align: center; -inherited from parent element .text-box */
    border-radius: 10rem;
    /* apply the transition to all properties defined
  - must be on the initial state
  - will apply to the hover and active states also
  */
    transition: all 0.2s;
    position: relative;
    font-size: 1.6rem;
  }
  /* creates a pseudo-element that is the last child of the selected element
   that you can style */
  &::after {
    /* must be specified */
    content: '';
    display: inline-block;
    /* since the pseudo element is a child, then here it will match the button */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* will be relative to the first parent element that has a relative position
  property - in this case, the button */
    position: absolute;
    top: 0;
    left: 0px;
    z-index: -1;
    transition: all 0.4s;
  }
  /* moves the button up slightly when hovered */
  &:hover {
    transform: translateY(-3px);
    /* 0 for no shadow in x axis
  10px down 20px blur*/
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

    /* apply these styles, only when the button is being hovered
  the initial state is the after pseudo element*/
    &::after {
      /* transform: scale(1.5); */
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }
  /* moves the button down slightly when clicked */
  &:active {
    transform: translateY(-0.1rem);
    /* decrease the shadown to make the button look closer */
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      background-color: Â§color-white;
    }
  }

  &--animated {
    /* .75s delay */
    animation: moveInBottom 0.5s ease-out 0.75s;
    /* applies the properties of the 0% before the animation starts */
    animation-fill-mode: backwards;
    /* animation-name: moveInBottom;
  animation-duration: 1s;
  animation-timing-function: ease-out; */
  }
}
